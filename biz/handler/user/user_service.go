// Code generated by hertz generator.

package user

import (
	"context"
	user "dous/biz/model/hertz/user"
	"dous/biz/model/query"
	"dous/biz/orm_gen"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserIfmtResponse .
// @router /douyin/user [POST]
func UserIfmtResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	var user_id = req.UserId
	var token = req.Token

	u := query.User

	result, err := u.Where(u.ID.Eq(user_id)).First()
	// 根据用户id查询用户相关信息
	var username = result.Username
	var realToken = username + result.Password

	var isfollow = false

	if err != nil {
		print(err)
	}
	var fg int
	//验证用户Token是否正确
	if realToken == token {
		fg = 0 //token 正确，返回用户信息
	} else {
		fg = 1 //token 错误，不返回信息
	}
	//返回用户相关信息
	var user_info = user.User{
		Id:       user_id,
		Name:     username,
		IsFollow: isfollow, //是否已经关注，true:关注
		//false:未关注
	}
	var res = user.DouyinUserResponse{
		StatusCode: int32(fg),
		StatusMsg:  "true",
		User:       &user_info,
	}
	c.JSON(consts.StatusOK, res)
}

// UserLoginResponse .
// @router /douyin/user/login/ [POST]
func UserLoginResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.DouyinUserLoginResponse)

	u, m := query.User, query.User.WithContext(ctx)
	m = m.Where(u.Username.Eq(req.Username), u.Password.Eq(req.Password))

	var total int64
	total, err = m.Count()
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = "false"
		resp.UserId = 0
		resp.Token = "null"
		c.JSON(200, resp)
		return
	}
	if total == 0 {
		resp.StatusCode = 1
		resp.StatusMsg = "false"
		resp.UserId = 0
		resp.Token = "null"
		c.JSON(200, resp)
		return
	}
	if total > 0 {
		users, err := m.First()
		if err != nil {
			resp.StatusCode = 1
			resp.StatusMsg = "false"
			resp.UserId = 0
			resp.Token = "null"
			c.JSON(200, resp)
			return
		}
		resp.StatusCode = 0
		resp.StatusMsg = "true"
		resp.UserId = users.ID
		resp.Token = req.Username
		resp.Token += req.Password

	}

	c.JSON(consts.StatusOK, resp)
}

// UserRegisterResponse .
// @router /douyin/user/register/ [POST]
func UserRegisterResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.DouyinUserRegisterResponse)

	u, m := query.User, query.User.WithContext(ctx)
	m = m.Where(u.Username.Eq(req.Username), u.Password.Eq(req.Password))
	var total int64
	total, err = m.Count()
	if err != nil || total != 0 {
		resp.StatusCode = 1
		resp.StatusMsg = "false"
		resp.UserId = 0
		resp.Token = "null"
		c.JSON(200, resp)
		return
	}

	user1 := orm_gen.User{
		Username: req.Username,
		Password: req.Password,
	}
	err = query.User.WithContext(ctx).Create(&user1)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = err.Error()
		resp.UserId = 1
		resp.Token = "null"
		c.JSON(200, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "true"
	resp.UserId = 1
	resp.Token = req.Username + req.Password

	c.JSON(consts.StatusOK, resp)
}
